<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>com.iniesta</groupId>
	<artifactId>flink-connector-mqtt</artifactId>
	<version>0.2</version>
	<packaging>jar</packaging>

	<name>Flink Connector for mqtt</name>
	<url>http://iniestadev.com</url>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<flink.version>1.3.2</flink.version>
		<slf4j.version>1.7.7</slf4j.version>
		<log4j.version>1.2.17</log4j.version>
		<scala.binary.version>2.10</scala.binary.version>
		<mqtt-client.version>1.12</mqtt-client.version>
		<maven.build.timestamp.format>MM.yyyy</maven.build.timestamp.format>
		<yearMonth>${maven.build.timestamp}</yearMonth>
		<!-- ************************ -->
		<!-- Sonar/Reporting settings -->
		<!-- ************************ -->
		<!-- Sonar/Jacoco integration. Note that these properties need to be defined 
			outside the "coverage" profile because we want to be to able to execute mvn 
			sonar:sonar without passing a profile -->
		<!-- Tells Sonar to use jacoco for coverage results -->
		<sonar.projectKey>flink-connector-mqtt</sonar.projectKey>
		<sonar.projectName>Flink Connector Mqtt</sonar.projectName>
		<sonar.projectVersion>${yearMonth}</sonar.projectVersion>
		<sonar.language>java</sonar.language>
		<sonar.sourceEncoding>UTF-8</sonar.sourceEncoding>
		<sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
		<!-- Jacoco version to use -->
		<jacoco.version>0.7.2.201409121644</jacoco.version>
		<!-- The Sonar Jacoco Listener for JUnit to extract coverage details per 
			test -->
		<sonar-jacoco-listeners.version>1.4</sonar-jacoco-listeners.version>
		<!-- Don't let Sonar execute tests. We will ask it to Maven 'sonar.dynamicAnalysis' 
			is deprecated since version 4.3 and should no longer be used. -->
		<!-- <sonar.dynamicAnalysis>reuseReports</sonar.dynamicAnalysis> -->
		<!-- The system property jacoco.outputDir needs to be override on the command 
			line with an absolute path if you want to merge results from all modules. 
			Example in a Jenkisn build where ${WORKSPACE} is defined and your project 
			in the root directory of the workspace : mvn clean install -Prun-its,coverage 
			-Djacoco.outputDir=${WORKSPACE}/target Note that unfortunately using the 
			following does not work because of http://jira.codehaus.org/browse/SONAR-3427: 
			<jacoco.outputDir>${session.executionRootDirectory}/target/</jacoco.outputDir> -->
		<jacoco.outputDir>${project.build.directory}</jacoco.outputDir>
		<!-- Jacoco output file for UTs -->
		<jacoco.out.ut.file>jacoco-ut.exec</jacoco.out.ut.file>
		<!-- Tells Sonar where the Jacoco coverage result file is located for Unit 
			Tests -->
		<sonar.jacoco.reportPath>${jacoco.outputDir}/${jacoco.out.ut.file}</sonar.jacoco.reportPath>
		<!-- Jacoco output file for ITs -->
		<jacoco.out.it.file>jacoco-it.exec</jacoco.out.it.file>
		<!-- Tells Sonar where the Jacoco coverage result file is located for Integration 
			Tests -->
		<sonar.jacoco.itReportPath>${jacoco.outputDir}/${jacoco.out.it.file}</sonar.jacoco.itReportPath>
		<!-- <sonar.junit.reportsPath>${project.build.directory}/surefire-reports/</sonar.junit.reportsPath> -->
		<!-- <sonar.tests>src/test/java</sonar.tests> -->
		<!-- === END of Sonar/Reporting settings === -->
	</properties>

	<!-- Execute "mvn clean package -Pbuild-jar" to build a jar file out of 
		this project! -->

	<repositories>
		<repository>
			<id>apache.snapshots</id>
			<name>Apache Development Snapshot Repository</name>
			<url>https://repository.apache.org/content/repositories/snapshots/</url>
			<releases>
				<enabled>false</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>
		<dependency>
			<groupId>org.fusesource.mqtt-client</groupId>
			<artifactId>mqtt-client</artifactId>
			<version>${mqtt-client.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-java</artifactId>
			<version>${flink.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.flink</groupId>
			<artifactId>flink-streaming-java_2.10</artifactId>
			<version>${flink.version}</version>
		</dependency>
		<dependency>
			<groupId>org.fusesource.hawtbuf</groupId>
			<artifactId>hawtbuf</artifactId>
			<version>1.11</version>
		</dependency>
		<dependency>
			<groupId>org.fusesource.hawtdispatch</groupId>
			<artifactId>hawtdispatch</artifactId>
			<version>1.22</version>
		</dependency>
		<dependency>
			<groupId>org.fusesource.hawtdispatch</groupId>
			<artifactId>hawtdispatch-transport</artifactId>
			<version>1.22</version>
		</dependency>
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>[8.0.16,)</version>
		</dependency>
		<dependency>
			<groupId>postgresql</groupId>
			<artifactId>postgresql</artifactId>
			<version>9.1-901-1.jdbc4</version>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.13.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>


	<build>
		<plugins>
			<plugin>
				<groupId>external.atlassian.jgitflow</groupId>
				<artifactId>jgitflow-maven-plugin</artifactId>
				<version>1.0-m5.1</version>
				<dependencies>
				    <dependency>
				      <groupId>com.jcraft</groupId>
				      <artifactId>jsch</artifactId>
				      <version>0.1.54</version>
				    </dependency>
				  </dependencies>
				<configuration>
					<noDeploy>true</noDeploy>
					<scmCommentPrefix>[RELEASE] </scmCommentPrefix>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>${jacoco.version}</version>
				<configuration>
					<propertyName>jacoco.agent.argLine</propertyName>
					<destFile>${sonar.jacoco.itReportPath}</destFile>
					<append>true</append>
				</configuration>
				<executions>
					<execution>
						<id>agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.1</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-javadoc-plugin</artifactId>
				<version>3.1.0</version>
				<configuration>
					<additionalparam>-Xdoclint:none</additionalparam>
					<doclint>none</doclint>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-shade-plugin</artifactId>
				<version>2.4.1</version>
				<executions>
					<execution>
						<phase>package</phase>
						<goals>
							<goal>shade</goal>
						</goals>
						<configuration>
							<artifactSet>
								<excludes combine.self="override" />
							</artifactSet>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
</project>
